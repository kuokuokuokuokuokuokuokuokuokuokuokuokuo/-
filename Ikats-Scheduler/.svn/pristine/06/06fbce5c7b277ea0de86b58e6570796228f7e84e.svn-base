package com.ikats.scheduler.job;

import com.ikats.scheduler.entity.bean.JSTSkuBean;
import com.ikats.scheduler.entity.enumerate.GYStatus;
import com.ikats.scheduler.logic.JSTSkuLogic;
import com.ikats.scheduler.util.OmsPostUtil;
import com.ikats.scheduler.util.SystemOutMessage;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.QuartzJobBean;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Author: Zhao Jianzhen
 * @Date: Created in 11:18 2018/1/3
 * @Description:
 */
public class OmsSendJSTSkuRegisterJob extends QuartzJobBean {

    @Autowired
    private JSTSkuLogic logic;

    @Override
    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException
    {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SystemOutMessage.start("OMS_SendSkuRegister",sdf.format(new Date()));
        if(null == logic)
        {
            SystemOutMessage.body("false 系统异常");
            return;
        }

        List<JSTSkuBean> skuSendJob = logic.getSkuSendJob();

        ArrayList<JSTSkuBean> updateBeans = new ArrayList<JSTSkuBean>();
        if (skuSendJob==null){
            SystemOutMessage.body(" -- 没有需要发送的备案 -- ");
            return;
        }
        try {
            for (int i =0 ;i<skuSendJob.size();i++){
                JSTSkuBean bean = skuSendJob.get(i);
                String request = bean.getOmsRequest();
                String result = OmsPostUtil.PostXml(request);
                if (result!=null){
                    JSTSkuBean update = new JSTSkuBean();
                    update.setId(bean.getId());
                    update.setTimes(bean.getTimes() + 1);
                    update.setSendTime(new Date());
                    if(result.contains("<ResultCode>1</ResultCode>") || result.contains("<ResultCode>2</ResultCode>"))
                    {
                        update.setState(GYStatus.SEND_OK.getValue());
                    }
                    else
                    {
                        update.setState(GYStatus.SEND_ERROR.getValue());
                    }
                    update.setReturnTime(new Date());
                    update.setOmsResponse(result);
                    updateBeans.add(update);
                }

            }
        }catch (Exception ex){
            SystemOutMessage.body(" false  " + ex.getMessage());
        }finally
        {
            for(JSTSkuBean bean : updateBeans)
            {
                this.logic.update(bean);
            }
        }
        SystemOutMessage.end("OMS_SendSkuRegister",sdf.format(new Date()));

    }
}
