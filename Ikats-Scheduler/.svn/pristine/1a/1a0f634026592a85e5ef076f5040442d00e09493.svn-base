package com.ikats.scheduler.job;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.ikats.scheduler.entity.bean.JSTSkuBean;
import com.ikats.scheduler.entity.enumerate.GYStatus;
import com.ikats.scheduler.logic.JSTSkuLogic;
import com.ikats.scheduler.util.JuShuiTanPostUtil;
import com.ikats.scheduler.util.OmsPostUtil;
import com.ikats.scheduler.util.SystemOutMessage;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.QuartzJobBean;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Author: Zhao Jianzhen
 * @Date: Created in 11:18 2018/1/3
 * @Description:
 */
public class OmsSendJSTSkuRegisterJob extends QuartzJobBean {

    @Autowired
    private JSTSkuLogic logic;

    @Override
    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException
    {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SystemOutMessage.start("OMS_SendJSTSkuRegister",sdf.format(new Date()));
        if(null == logic)
        {
            SystemOutMessage.body("false 系统异常");
            return;
        }
        ArrayList<JSTSkuBean> updateBeans = new ArrayList<JSTSkuBean>();
        try {

            //获取到 appkey 对应的客户关系
            String omsXml = "<eFreightService>\n" +
                    "<ServiceURL>Client</ServiceURL>\n" +
                    "<ServiceAction>queryClient</ServiceAction>\n" +
                    "<ServiceData>\n" +
                    "<ChannelId/>\n" +
                    "<AdminUserName>" + JuShuiTanPostUtil.PARTNER_ID + "</AdminUserName>\n" +
                    "<StockId/>\n" +
                    "<ClientId/>\n" +
                    "</ServiceData>\n" +
                    "</eFreightService>\n";

            System.out.println(omsXml);
            String clients = OmsPostUtil.PostXml(omsXml);

            JSONObject jsonClients = (JSONObject) JSONPath.read(clients,"$");
            if(null == jsonClients)
            {
                SystemOutMessage.body("OMS --  client 查询失败 -- 终止备案发送");
                return;
            }
            String clientSuccess = jsonClients.getString("success");
            if(null == clientSuccess || !clientSuccess.equals("true"))
            {
                SystemOutMessage.body("OMS --  client 查询失败 -- 终止备案发送");
                return;
            }
            JSONArray client = jsonClients.getJSONArray("client");
            for(int x=0;x<client.size();x++){
                JSONObject jClient = (JSONObject) client.get(x);
                String clientId = jClient.getString("clientid");
                String stockid = jClient.getString("stockid");
                List<JSTSkuBean> skuSendJob = logic.getSkuSendJob();

                if (skuSendJob==null){
                    SystemOutMessage.body(" -- 没有需要发送的备案 -- ");
                    return;
                }

                for (int i =0 ;i<skuSendJob.size();i++){
                    JSTSkuBean bean = skuSendJob.get(i);
                    String request = bean.getOmsRequest();

                    request = request.replace("<UserName></UserName>","<UserName>" + clientId + "</UserName>");
                    request = request.replace("<ClientId></ClientId>","<ClientId>" + clientId + "</ClientId>");
                    request = request.replace("<WarehouseNo></WarehouseNo>","<WarehouseNo>" + stockid + "</WarehouseNo>");
                    String result = OmsPostUtil.PostXml(request);
                    System.out.println(request);
                    if (result!=null){
                        JSTSkuBean update = new JSTSkuBean();
                        update.setId(bean.getId());
                        update.setTimes(bean.getTimes() + 1);
                        update.setSendTime(new Date());
                        if(result.contains("<ResultCode>1</ResultCode>") || result.contains("<ResultCode>2</ResultCode>"))
                        {
                            update.setState(GYStatus.SEND_OK.getValue());
                        }
                        else
                        {
                            update.setState(GYStatus.SEND_ERROR.getValue());
                        }
                        update.setReturnTime(new Date());
                        update.setOmsResponse(result);
                        updateBeans.add(update);
                    }

                }
            }

        }catch (Exception ex){
            SystemOutMessage.body(" false  " + ex.getMessage());
        }finally
        {
            for(JSTSkuBean bean : updateBeans)
            {
                this.logic.update(bean);
            }
        }
        SystemOutMessage.end("OMS_SendJSTSkuRegister",sdf.format(new Date()));

    }
}
