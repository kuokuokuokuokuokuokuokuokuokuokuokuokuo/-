package com.ikats.scheduler.job;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.ikats.scheduler.entity.bean.JSTOrderBean;
import com.ikats.scheduler.entity.enumerate.SendStatus;
import com.ikats.scheduler.logic.JSTOrderLogic;
import com.ikats.scheduler.util.*;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.quartz.QuartzJobBean;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 定时任务获取 - 聚水潭 - 的发货单
 *
 * @Author : liu kuo
 * @Date : 2017/10/26 15:14.
 * @Description : Indulge in study , wasting away
 */

public class JuShuiTanGetOrdersJob extends QuartzJobBean {

    @Autowired
    private JSTOrderLogic orderLogic;

    @Override
    protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SystemOutMessage.start("JuShuiTan_GetOrders", sdf.format(new Date()));
        if (null == orderLogic) {
            SystemOutMessage.body("false 系统异常");
            return;
        }
        try {
            //获取到 appkey 对应的客户关系
            String clientXml = "<eFreightService>\n" +
                    "<ServiceURL>Client</ServiceURL>\n" +
                    "<ServiceAction>queryClient</ServiceAction>\n" +
                    "<ServiceData>\n" +
                    "<ChannelId/>\n" +
                    "<AdminUserName>" + JuShuiTanPostUtil.PARTNER_ID + "</AdminUserName>\n" +
                    "<StockId/>\n" +
                    "<ClientId/>\n" +
                    "</ServiceData>\n" +
                    "</eFreightService>\n";

            String clients = OmsPostUtil.PostXml(clientXml);

            JSONObject jsonClients = (JSONObject) JSONPath.read(clients, "$");
            if (null == jsonClients)
            {
                SystemOutMessage.body("OMS --  client 查询失败 -- 终止取消订单查询");
                return;
            }
            String clientSuccess = jsonClients.getString("success");
            if (null == clientSuccess || !clientSuccess.equals("true")) {
                SystemOutMessage.body("OMS --  client 查询失败 -- 终止订单发送");
                return;
            }
            JSONArray client = jsonClients.getJSONArray("client");
            if(null == client || client.size() == 0)
            {
                SystemOutMessage.body("OMS --  无客户数据 -- 终止订单发送");
                return;
            }
            for (int i = 0; i < client.size(); i++)
            {
                JSONObject jClient = (JSONObject) client.get(i);
                //客户
                String clientId = jClient.getString("clientid");
                //仓库
                String stockId = jClient.getString("stockid");
                //渠道
                String channelId = jClient.getString("channelid");

                String sPartnerId = JuShuiTanPostUtil.PARTNER_ID;
                String sPartnerKey = JuShuiTanPostUtil.PARTNER_KEY;
                String sToken = JuShuiTanPostUtil.TOKEN;
                String sHostUrl = "http://a1q40taq0j.api.taobao.com/router/qmtest";
                String sMethod = "jst.orders.query";
                String sTaobaoAPPKEYString = JuShuiTanPostUtil.TAO_KEY;
                String sTaobaoAPPSECRET = JuShuiTanPostUtil.TAO_SECRET;
                JSTQuery api = new JSTQuery(sTaobaoAPPKEYString, sTaobaoAPPSECRET, sPartnerId, sPartnerKey, sToken, sMethod, sHostUrl);
                api.AddArg("modified_begin", "2017-11-1");
                api.AddArg("modified_end", "2017-11-3");
                api.AddArg("status", "Delivering");
//                api.AddArg("shop_id", channelId);//该测试店铺暂无数据
                String sData = api.QueryData();
                JSONObject jsonJST = (JSONObject) JSONPath.read(sData, "$");
                JSONObject response = jsonJST.getJSONObject("response");
                boolean success = response.getBoolean("issuccess");
                JSONArray orders = response.getJSONArray("orders");
                if(!success)
                {
                    System.out.println("客户 :" + clientId + "订单查询失败!" + sData);
                    continue;
                }
                if(null == orders || orders.size() == 0)
                {
                    continue;
                }
                List<JSTOrderBean> orderBeans = new ArrayList<JSTOrderBean>();
                for(int j=0; j<orders.size(); j++)
                {
                    JSONObject order = orders.getJSONObject(j);
                    JSTOrderBean orderBean = new JSTOrderBean();
                    orderBean.setAppKey(JuShuiTanPostUtil.PARTNER_ID);
                    orderBean.setOrderNo(order.getString("so_id"));
                    orderBean.setState(SendStatus.INIT.getValue());
                    orderBean.setTimes(0);
                    orderBean.setCreateTime(new Date());

                    JSONArray items = order.getJSONArray("items");
                    int totalQty = 0;
                    StringBuilder skuItems = new StringBuilder();
                    for (int x = 0; x < items.size(); x++)
                    {
                        JSONObject sku = (JSONObject) items.get(x);
                        totalQty += JobDataTransferUtil.stringToInt(sku.getString("qty"));
                        skuItems.append("        <OrderDetailItem>\n" +
                                "          <SKUCode>" + sku.get("shop_sku_id") + "</SKUCode>\n" +
                                "          <SKUName>" + sku.get("name") + "</SKUName>\n" +
                                "          <SKUEnglishName/>\n" +
                                "          <SKUModel>" + sku.get("properties_value") + "</SKUModel>\n" +
                                "          <SKUPrice>" + sku.get(" base_price ") + "</SKUPrice>\n" +
                                "          <SKUCount>" + JobDataTransferUtil.stringToInt(sku.getString("qty")) + "</SKUCount>\n" +
                                "          <LabelCode></LabelCode>\n" +
                                "          <MailTaxNo></MailTaxNo>\n" +
                                "          <HsCode></HsCode>\n" +
                                "          <GoodsItemNo></GoodsItemNo>\n" +
                                "          <ProductionMarketingCountry></ProductionMarketingCountry>\n" +
                                "          <GoodsNetWeight>0</GoodsNetWeight>\n" +
                                "          <GoodsRoughWeight>0</GoodsRoughWeight>\n" +
                                "          <BargainCurrency>142</BargainCurrency>\n" +
                                "          <DeclareCount>" + JobDataTransferUtil.stringToInt(sku.getString("qty")) + "</DeclareCount>\n" +
                                "          <DeclareMeasureUnit></DeclareMeasureUnit>\n" +
                                "          <FirstUnit/>\n" +
                                "          <FirstCount/>\n" +
                                "          <SecondUnit/>\n" +
                                "          <SecondCount/>\n" +
                                "        </OrderDetailItem>\n");
                    }

                    StringBuilder omsXml = new StringBuilder();
                    omsXml.append("<Service>\n" +
                            "  <ServiceURL>OMSOrder</ServiceURL>\n" +
                            "  <ServiceAction>DMOrder</ServiceAction>\n" +
                            "  <UserName>" + clientId + "</UserName>\n" +
                            "  <ChannelName>管易</ChannelName>\n" +
                            "  <ServiceData>\n" +
                            "    <Order>\n" +
                            "      <SupplyVendor>" + clientId + "</SupplyVendor>\n" +
                            "      <SupplyChannel>" + clientId + "</SupplyChannel>\n" +
                            "      <ClearPort>境内</ClearPort>\n" +
                            "      <Port></Port>\n" +
                            "      <eStoreNo>" + clientId + "</eStoreNo>\n" +
                            "      <OrderNo>" + order.getString("so_id") + "</OrderNo>\n" +
                            "      <PaymentNo/>\n" +
                            "      <PayChannel></PayChannel>\n" +
                            "      <ParcelCode></ParcelCode>\n" +
                            "      <Mawbcode></Mawbcode>\n" +
                            "      <FreightCode/>\n" +
                            "      <OrderTotalAmount>" + order.get("pay_amount") + "</OrderTotalAmount>\n" +
                            "      <OrderGoodsAmount>" + order.get("pay_amount") + "</OrderGoodsAmount>\n" +
                            "      <OrderTotalCount>" + totalQty + "</OrderTotalCount>\n" +
                            "      <FreightCharge>" + order.get("freight") + "</FreightCharge>\n" +
                            "      <TarrifCharge>0</TarrifCharge>\n" +
                            "      <ValuationFee>0</ValuationFee>\n" +
                            "      <Discount>" + order.get("free_amount") + "</Discount>\n" +
                            "      <OrderTime>" + order.getString("order_date") + "</OrderTime>\n" +
                            "      <Status>ORDER</Status>\n" +
                            "      <RoughWeight>0</RoughWeight>\n" +
                            "      <NetWeight>0</NetWeight>\n" +
                            "      <StockId>" + stockId + "</StockId>\n" +
                            "      <StockName></StockName>\n" +
                            "      <IdentityImageFront></IdentityImageFront>\n" +
                            "      <IdentityImageBack></IdentityImageBack>\n" +
                            "      <PurchaseChannel/>\n" +
                            "      <PurchaseLogistics/>\n" +
                            "      <PurchaseLogisticsCode></PurchaseLogisticsCode>\n" +
                            "      <TransferFirstName/>\n" +
                            "      <TransferLastName/>\n" +
                            "      <ChannelId>" + order.get("shop_id") + "</ChannelId>\n" +
                            "      <ShopName>" + order.getString("shop_name") + "</ShopName>\n" +
                            "      <ChannelName>聚水潭</ChannelName>\n" +
                            "      <Forwarder>EMS</Forwarder>\n" +
                            "      <SKUDesc></SKUDesc>\n" +
                            "\t  <Note></Note>\n" +
                            "\t  <Remark></Remark>\n" +
                            "      <NeutralPackage/>\n" +
                            "      <Buyer>\n" +
                            "        <BuyerID/>\n" +
                            "        <BuyerName></BuyerName>\n" +
                            "        <BuyerEmail/>\n" +
                            "        <BuyerPhone/>\n" +
                            "        <BuyerAddress/>\n" +
                            "        <BuyerIdentityCardType>01</BuyerIdentityCardType>\n" +
                            "        <BuyerIdentityCardNo></BuyerIdentityCardNo>\n" +
                            "      </Buyer>\n" +
                            "      <Consignee>\n" +
                            "        <ConsigneeName>" + order.get("receiver_name") + "</ConsigneeName>\n" +
                            "        <ConsigneeEmail/>\n" +
                            "        <ConsigneePhone>" + order.get("receiver_mobile") + "</ConsigneePhone>\n" +
                            "        <ConsigneePost/>\n" +
                            "        <ConsigneeAddress>" + order.get("receiver_address") + "</ConsigneeAddress>\n" +
                            "        <ConsigneeIdentityCardType>01</ConsigneeIdentityCardType>\n" +
                            "        <ConsigneeIdentityCardNo></ConsigneeIdentityCardNo>\n" +
                            "        <RecipientProvincesCode></RecipientProvincesCode>\n" +
                            "        <tcustProvince>" + order.get("receiver_state") + "</tcustProvince>\n" +
                            "        <tcustCity>" + order.get("receiver_city") + "</tcustCity>\n" +
                            "        <tcustCounty>" + order.get("receiver_district") + "</tcustCounty>\n" +
                            "      </Consignee>\n" +
                            "      <OrderDetailList>\n");

                            omsXml.append(skuItems.toString());
                    omsXml.append("      </OrderDetailList>\n" +
                            "    </Order>\n" +
                            "  </ServiceData>\n" +
                            "</Service>\n");
                    orderBean.setOmsRequest(omsXml.toString());
                    orderBeans.add(orderBean);
                }

                this.orderLogic.insertList(orderBeans);
                if (!orderLogic.getSuccess())
                {
                    SystemOutMessage.body(this.orderLogic.getSuccess() + this.orderLogic.getMessage());
                    return;
                }
            }
        } catch (Exception e)
        {
            System.out.println("系统异常!" + e.getMessage());
            return;
        }

        SystemOutMessage.end("JuShuiTan", sdf.format(new Date()));
    }
}
