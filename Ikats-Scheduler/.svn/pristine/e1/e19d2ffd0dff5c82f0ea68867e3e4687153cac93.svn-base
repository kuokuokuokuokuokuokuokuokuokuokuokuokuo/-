package com.ikats.scheduler.logic;

import java.util.List;
import java.util.Map;

import com.ikats.chigoose.dms.entity.enumerate.StatusCode;
import com.ikats.scheduler.repository.IGYRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.ikats.scheduler.entity.bean.GYRecordBean;
import org.springframework.transaction.annotation.Transactional;

/**
 * Logic
 * <p>
 * 管易对接的报文 , 数据记录表
 * <p>
 * 自动生成
 *
 * @author over3
 * @version 1.0, 2017-12-05 09:31:01
 */
@Component
@Transactional
public class GYRecordLogic extends AbstractLogic {

    @Autowired
    private IGYRecordRepository repository;

    /**
     * 添加单条记录
     */
    public void insert(GYRecordBean bean) {
        Long count = repository.insert(bean);
        if (count <= 0) {
            this.setSuccess(false);
            this.setMessage("没有新增");
            this.setCode(StatusCode.INFO_NO_INSERT.getValue());
            return;
        }
        this.setSuccess(true);
    }

    /**
     * 添加一批记录
     */
    public void insertList(List<GYRecordBean> list) {
        int count = repository.insertList(list);
        if (count <= 0) {
            this.setSuccess(false);
            this.setMessage("没有新增");
            this.setCode(StatusCode.INFO_NO_INSERT.getValue());
            return;
        }
        this.setSuccess(true);
    }

    /**
     * 更新记录
     */
    public void update(GYRecordBean bean) {
        int count = repository.update(bean);
        if (count <= 0) {
            this.setSuccess(false);
            this.setMessage("修改失败");
            this.setCode(StatusCode.INFO_NO_INSERT.getValue());
            return;
        }
        this.setSuccess(true);
    }

    /**
     * 删除记录
     */
    public void delete(Long id) {
        int count = repository.delete(id);
        if (count <= 0) {
            this.setSuccess(false);
            this.setMessage("删除失败");
            this.setCode(StatusCode.INFO_NO_DELETE.getValue());
            return;
        }
        this.setSuccess(true);
    }

    /**
     * 得到一条记录
     */
    public GYRecordBean selectByKey(Long id) {
        GYRecordBean bean = repository.selectByKey(id);
        if (bean == null) {
            this.setSuccess(false);
            this.setMessage("没有找到");
            this.setCode(StatusCode.INFO_NO_QUERY.getValue());
            return null;
        }
        return bean;
    }

    /**
     * 所有记录计数
     */
    public Long selectCount(Map<String, String> express) {
        Long count = repository.selectCount(express);
        this.setSuccess(true);
        return count;
    }

    /**
     * 得到查询记录
     */
    public List<GYRecordBean> selectByQuery(Map<String, String> express) {
        List<GYRecordBean> beanList = repository.selectByQuery(express);
        if (beanList.size() == 0) {
            this.setSuccess(false);
            this.setMessage("没有找到");
            this.setCode(StatusCode.INFO_NO_QUERY.getValue());
            return null;
        }
        this.setSuccess(true);
        return beanList;
    }

    /**
     * 得到翻页查询记录
     */
    public List<GYRecordBean> pageByQuery(int pageNum, int pageSize, Map<String, String> express) {
        List<GYRecordBean> beanList = repository.pageByQuery(pageNum, pageSize, express);
        if (beanList.size() == 0) {
            this.setSuccess(false);
            this.setMessage("没有找到");
            this.setCode(StatusCode.INFO_NO_QUERY.getValue());
            return null;
        }
        this.setSuccess(true);
        return beanList;
    }
}
